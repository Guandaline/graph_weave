# -----------------------------------------------------
# Example .env.example file for project configuration
#
# INSTRUCTIONS:
# 1. Copy this file to a new file named `.env` in the project root.
# 2. Fill in the necessary values in your `.env` file for your LOCAL setup.
# 3. Add the `.env` file to your `.gitignore` - DO NOT COMMIT IT TO GIT,
#    especially if it contains secrets like passwords or API keys.
# 4. This `.env.example` file SHOULD be committed to Git as a template.
# -----------------------------------------------------

# --- Dynaconf Configuration Paths ---
# These variables tell the Python configuration loader where to find settings files.
# Set these as actual environment variables in production/staging/CI.
# For local development, define them here if you are not setting them globally.
# Paths are typically relative to the project root for local dev.

# Comma-separated list of settings files. Order dictates override precedence.
# Example: SETTINGS_FILES=settings/settings.toml,settings/development.toml
SETTINGS_FILES="settings/settings.toml,settings/development.toml"

# --- Dynaconf Behavior ---

# Sets the current operational environment (e.g., development, production, testing).
# This controls which sections (like [development]) in settings files are active.
# Example: ENV_FOR_DYNACONF=development
ENV_FOR_DYNACONF="development"


# == Logging Level Example ==
# Overrides log level set in settings files. Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL="DEBUG"


# Tests

RUN_INTEGRATION_TESTS="true" # Set to false in production

PROFILING_OUTPUT_DIR = .tests_history/profile

# Monitoring

OBSERVABILITY_METRICS_ALLOW_METRICS_IPS='["127.0.0.1", "172.28.0.10"]'
